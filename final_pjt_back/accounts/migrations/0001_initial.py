# Generated by Django 4.2.16 on 2024-11-22 06:26

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('finlife', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('money', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('nickname', models.CharField(default='nickname_none', max_length=30)),
                ('desiredSubscriptionPeriod', models.IntegerField(default=12)),
                ('mainBank', models.CharField(default='bank_none', max_length=30)),
                ('profile_img', models.ImageField(blank=True, null=True, upload_to='accounts/')),
                ('liked_products_deposit', models.ManyToManyField(blank=True, related_name='liked_by_users_deposit', to='finlife.depositproducts')),
                ('liked_products_saving', models.ManyToManyField(blank=True, related_name='liked_by_users_saving', to='finlife.savingproducts')),
                ('love_deposit', models.ManyToManyField(blank=True, related_name='loved_by_users_deposit', to='finlife.depositproducts')),
                ('love_saving', models.ManyToManyField(blank=True, related_name='loved_by_users_saving', to='finlife.savingproducts')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FinInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job', models.CharField(blank=True, max_length=50, null=True)),
                ('monthly_income', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('annual_income', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('current_assets', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('monthly_savings', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('fixed_expenses', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('variable_expenses', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('goal_type', models.CharField(blank=True, max_length=100, null=True)),
                ('goal_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('goal_date', models.IntegerField(blank=True, null=True)),
                ('prefers_stability', models.BooleanField(default=False)),
                ('preference_type', models.CharField(blank=True, max_length=100, null=True)),
                ('mbti', models.CharField(blank=True, max_length=4, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fininfo', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
